//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.261
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace slPanel.ControlService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LedOutputData", Namespace="http://schemas.datacontract.org/2004/07/LedClientService.Devices")]
    public partial class LedOutputData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BField;
        
        private int GField;
        
        private slPanel.ControlService.OutputPriority PriorityField;
        
        private int RField;
        
        private int SectionIDField;
        
        private int WField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int B {
            get {
                return this.BField;
            }
            set {
                if ((this.BField.Equals(value) != true)) {
                    this.BField = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int G {
            get {
                return this.GField;
            }
            set {
                if ((this.GField.Equals(value) != true)) {
                    this.GField = value;
                    this.RaisePropertyChanged("G");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public slPanel.ControlService.OutputPriority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int R {
            get {
                return this.RField;
            }
            set {
                if ((this.RField.Equals(value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectionID {
            get {
                return this.SectionIDField;
            }
            set {
                if ((this.SectionIDField.Equals(value) != true)) {
                    this.SectionIDField = value;
                    this.RaisePropertyChanged("SectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int W {
            get {
                return this.WField;
            }
            set {
                if ((this.WField.Equals(value) != true)) {
                    this.WField = value;
                    this.RaisePropertyChanged("W");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputPriority", Namespace="http://schemas.datacontract.org/2004/07/LedClientService.Devices")]
    public enum OutputPriority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = -2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneTime = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LedDevice", Namespace="http://schemas.datacontract.org/2004/07/LedClientService.Devices")]
    public partial class LedDevice : slPanel.ControlService.Device {
        
        private int BField;
        
        private int GField;
        
        private string LedTypeField;
        
        private int RField;
        
        private int WField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int B {
            get {
                return this.BField;
            }
            set {
                if ((this.BField.Equals(value) != true)) {
                    this.BField = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int G {
            get {
                return this.GField;
            }
            set {
                if ((this.GField.Equals(value) != true)) {
                    this.GField = value;
                    this.RaisePropertyChanged("G");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LedType {
            get {
                return this.LedTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LedTypeField, value) != true)) {
                    this.LedTypeField = value;
                    this.RaisePropertyChanged("LedType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int R {
            get {
                return this.RField;
            }
            set {
                if ((this.RField.Equals(value) != true)) {
                    this.RField = value;
                    this.RaisePropertyChanged("R");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int W {
            get {
                return this.WField;
            }
            set {
                if ((this.WField.Equals(value) != true)) {
                    this.WField = value;
                    this.RaisePropertyChanged("W");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/LedClientService.Devices")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(slPanel.ControlService.LedDevice))]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DeviceIDField;
        
        private string DeviceTypeField;
        
        private bool IsConnectedField;
        
        private int SectionIDField;
        
        private int ZeeBeeIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceTypeField, value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectionID {
            get {
                return this.SectionIDField;
            }
            set {
                if ((this.SectionIDField.Equals(value) != true)) {
                    this.SectionIDField = value;
                    this.RaisePropertyChanged("SectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZeeBeeID {
            get {
                return this.ZeeBeeIDField;
            }
            set {
                if ((this.ZeeBeeIDField.Equals(value) != true)) {
                    this.ZeeBeeIDField = value;
                    this.RaisePropertyChanged("ZeeBeeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControlService.IControlService", CallbackContract=typeof(slPanel.ControlService.IControlServiceCallback))]
    public interface IControlService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/ImportProject", ReplyAction="http://tempuri.org/IControlService/ImportProjectResponse")]
        System.IAsyncResult BeginImportProject(string serverIP, int projectid, System.AsyncCallback callback, object asyncState);
        
        void EndImportProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/ToServerSayHello", ReplyAction="http://tempuri.org/IControlService/ToServerSayHelloResponse")]
        System.IAsyncResult BeginToServerSayHello(System.AsyncCallback callback, object asyncState);
        
        void EndToServerSayHello(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/Regist", ReplyAction="http://tempuri.org/IControlService/RegistResponse")]
        System.IAsyncResult BeginRegist(System.AsyncCallback callback, object asyncState);
        
        void EndRegist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/ReloadSchedule", ReplyAction="http://tempuri.org/IControlService/ReloadScheduleResponse")]
        System.IAsyncResult BeginReloadSchedule(System.AsyncCallback callback, object asyncState);
        
        void EndReloadSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/GetAllLEDDeviceOutput", ReplyAction="http://tempuri.org/IControlService/GetAllLEDDeviceOutputResponse")]
        System.IAsyncResult BeginGetAllLEDDeviceOutput(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> EndGetAllLEDDeviceOutput(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/GetAllLEDDeviceInfo", ReplyAction="http://tempuri.org/IControlService/GetAllLEDDeviceInfoResponse")]
        System.IAsyncResult BeginGetAllLEDDeviceInfo(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> EndGetAllLEDDeviceInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IControlService/ImportDevices", ReplyAction="http://tempuri.org/IControlService/ImportDevicesResponse")]
        System.IAsyncResult BeginImportDevices(string serverIP, int projectID, System.AsyncCallback callback, object asyncState);
        
        void EndImportDevices(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/ToClientSayHello")]
        void ToClientSayHello(string hello);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/ToClientNotifyLedDisplayChange")]
        void ToClientNotifyLedDisplayChange(int DeviceID, slPanel.ControlService.LedOutputData outdata);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/ToClientNotifyConnectionChange")]
        void ToClientNotifyConnectionChange(int DeviceID, bool Connected);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlServiceChannel : slPanel.ControlService.IControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllLEDDeviceOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllLEDDeviceOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllLEDDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllLEDDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlServiceClient : System.ServiceModel.DuplexClientBase<slPanel.ControlService.IControlService>, slPanel.ControlService.IControlService {
        
        private BeginOperationDelegate onBeginImportProjectDelegate;
        
        private EndOperationDelegate onEndImportProjectDelegate;
        
        private System.Threading.SendOrPostCallback onImportProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginToServerSayHelloDelegate;
        
        private EndOperationDelegate onEndToServerSayHelloDelegate;
        
        private System.Threading.SendOrPostCallback onToServerSayHelloCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegistDelegate;
        
        private EndOperationDelegate onEndRegistDelegate;
        
        private System.Threading.SendOrPostCallback onRegistCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadScheduleDelegate;
        
        private EndOperationDelegate onEndReloadScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onReloadScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllLEDDeviceOutputDelegate;
        
        private EndOperationDelegate onEndGetAllLEDDeviceOutputDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllLEDDeviceOutputCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllLEDDeviceInfoDelegate;
        
        private EndOperationDelegate onEndGetAllLEDDeviceInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllLEDDeviceInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportDevicesDelegate;
        
        private EndOperationDelegate onEndImportDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onImportDevicesCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ControlServiceClient(string endpointConfigurationName) : 
                this(new ControlServiceClientCallback(), endpointConfigurationName) {
        }
        
        private ControlServiceClient(ControlServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ControlServiceClientCallback(), binding, remoteAddress) {
        }
        
        private ControlServiceClient(ControlServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ControlServiceClient() : 
                this(new ControlServiceClientCallback()) {
        }
        
        private ControlServiceClient(ControlServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ImportProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ToServerSayHelloCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadScheduleCompleted;
        
        public event System.EventHandler<GetAllLEDDeviceOutputCompletedEventArgs> GetAllLEDDeviceOutputCompleted;
        
        public event System.EventHandler<GetAllLEDDeviceInfoCompletedEventArgs> GetAllLEDDeviceInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ImportDevicesCompleted;
        
        public event System.EventHandler<ToClientSayHelloReceivedEventArgs> ToClientSayHelloReceived;
        
        public event System.EventHandler<ToClientNotifyLedDisplayChangeReceivedEventArgs> ToClientNotifyLedDisplayChangeReceived;
        
        public event System.EventHandler<ToClientNotifyConnectionChangeReceivedEventArgs> ToClientNotifyConnectionChangeReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginImportProject(string serverIP, int projectid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportProject(serverIP, projectid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slPanel.ControlService.IControlService.EndImportProject(System.IAsyncResult result) {
            base.Channel.EndImportProject(result);
        }
        
        private System.IAsyncResult OnBeginImportProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string serverIP = ((string)(inValues[0]));
            int projectid = ((int)(inValues[1]));
            return ((slPanel.ControlService.IControlService)(this)).BeginImportProject(serverIP, projectid, callback, asyncState);
        }
        
        private object[] OnEndImportProject(System.IAsyncResult result) {
            ((slPanel.ControlService.IControlService)(this)).EndImportProject(result);
            return null;
        }
        
        private void OnImportProjectCompleted(object state) {
            if ((this.ImportProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportProjectAsync(string serverIP, int projectid) {
            this.ImportProjectAsync(serverIP, projectid, null);
        }
        
        public void ImportProjectAsync(string serverIP, int projectid, object userState) {
            if ((this.onBeginImportProjectDelegate == null)) {
                this.onBeginImportProjectDelegate = new BeginOperationDelegate(this.OnBeginImportProject);
            }
            if ((this.onEndImportProjectDelegate == null)) {
                this.onEndImportProjectDelegate = new EndOperationDelegate(this.OnEndImportProject);
            }
            if ((this.onImportProjectCompletedDelegate == null)) {
                this.onImportProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportProjectCompleted);
            }
            base.InvokeAsync(this.onBeginImportProjectDelegate, new object[] {
                        serverIP,
                        projectid}, this.onEndImportProjectDelegate, this.onImportProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginToServerSayHello(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginToServerSayHello(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slPanel.ControlService.IControlService.EndToServerSayHello(System.IAsyncResult result) {
            base.Channel.EndToServerSayHello(result);
        }
        
        private System.IAsyncResult OnBeginToServerSayHello(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slPanel.ControlService.IControlService)(this)).BeginToServerSayHello(callback, asyncState);
        }
        
        private object[] OnEndToServerSayHello(System.IAsyncResult result) {
            ((slPanel.ControlService.IControlService)(this)).EndToServerSayHello(result);
            return null;
        }
        
        private void OnToServerSayHelloCompleted(object state) {
            if ((this.ToServerSayHelloCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ToServerSayHelloCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ToServerSayHelloAsync() {
            this.ToServerSayHelloAsync(null);
        }
        
        public void ToServerSayHelloAsync(object userState) {
            if ((this.onBeginToServerSayHelloDelegate == null)) {
                this.onBeginToServerSayHelloDelegate = new BeginOperationDelegate(this.OnBeginToServerSayHello);
            }
            if ((this.onEndToServerSayHelloDelegate == null)) {
                this.onEndToServerSayHelloDelegate = new EndOperationDelegate(this.OnEndToServerSayHello);
            }
            if ((this.onToServerSayHelloCompletedDelegate == null)) {
                this.onToServerSayHelloCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnToServerSayHelloCompleted);
            }
            base.InvokeAsync(this.onBeginToServerSayHelloDelegate, null, this.onEndToServerSayHelloDelegate, this.onToServerSayHelloCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginRegist(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegist(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slPanel.ControlService.IControlService.EndRegist(System.IAsyncResult result) {
            base.Channel.EndRegist(result);
        }
        
        private System.IAsyncResult OnBeginRegist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slPanel.ControlService.IControlService)(this)).BeginRegist(callback, asyncState);
        }
        
        private object[] OnEndRegist(System.IAsyncResult result) {
            ((slPanel.ControlService.IControlService)(this)).EndRegist(result);
            return null;
        }
        
        private void OnRegistCompleted(object state) {
            if ((this.RegistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegistAsync() {
            this.RegistAsync(null);
        }
        
        public void RegistAsync(object userState) {
            if ((this.onBeginRegistDelegate == null)) {
                this.onBeginRegistDelegate = new BeginOperationDelegate(this.OnBeginRegist);
            }
            if ((this.onEndRegistDelegate == null)) {
                this.onEndRegistDelegate = new EndOperationDelegate(this.OnEndRegist);
            }
            if ((this.onRegistCompletedDelegate == null)) {
                this.onRegistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegistCompleted);
            }
            base.InvokeAsync(this.onBeginRegistDelegate, null, this.onEndRegistDelegate, this.onRegistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginReloadSchedule(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReloadSchedule(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slPanel.ControlService.IControlService.EndReloadSchedule(System.IAsyncResult result) {
            base.Channel.EndReloadSchedule(result);
        }
        
        private System.IAsyncResult OnBeginReloadSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slPanel.ControlService.IControlService)(this)).BeginReloadSchedule(callback, asyncState);
        }
        
        private object[] OnEndReloadSchedule(System.IAsyncResult result) {
            ((slPanel.ControlService.IControlService)(this)).EndReloadSchedule(result);
            return null;
        }
        
        private void OnReloadScheduleCompleted(object state) {
            if ((this.ReloadScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadScheduleAsync() {
            this.ReloadScheduleAsync(null);
        }
        
        public void ReloadScheduleAsync(object userState) {
            if ((this.onBeginReloadScheduleDelegate == null)) {
                this.onBeginReloadScheduleDelegate = new BeginOperationDelegate(this.OnBeginReloadSchedule);
            }
            if ((this.onEndReloadScheduleDelegate == null)) {
                this.onEndReloadScheduleDelegate = new EndOperationDelegate(this.OnEndReloadSchedule);
            }
            if ((this.onReloadScheduleCompletedDelegate == null)) {
                this.onReloadScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginReloadScheduleDelegate, null, this.onEndReloadScheduleDelegate, this.onReloadScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginGetAllLEDDeviceOutput(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllLEDDeviceOutput(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> slPanel.ControlService.IControlService.EndGetAllLEDDeviceOutput(System.IAsyncResult result) {
            return base.Channel.EndGetAllLEDDeviceOutput(result);
        }
        
        private System.IAsyncResult OnBeginGetAllLEDDeviceOutput(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slPanel.ControlService.IControlService)(this)).BeginGetAllLEDDeviceOutput(callback, asyncState);
        }
        
        private object[] OnEndGetAllLEDDeviceOutput(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> retVal = ((slPanel.ControlService.IControlService)(this)).EndGetAllLEDDeviceOutput(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllLEDDeviceOutputCompleted(object state) {
            if ((this.GetAllLEDDeviceOutputCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllLEDDeviceOutputCompleted(this, new GetAllLEDDeviceOutputCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllLEDDeviceOutputAsync() {
            this.GetAllLEDDeviceOutputAsync(null);
        }
        
        public void GetAllLEDDeviceOutputAsync(object userState) {
            if ((this.onBeginGetAllLEDDeviceOutputDelegate == null)) {
                this.onBeginGetAllLEDDeviceOutputDelegate = new BeginOperationDelegate(this.OnBeginGetAllLEDDeviceOutput);
            }
            if ((this.onEndGetAllLEDDeviceOutputDelegate == null)) {
                this.onEndGetAllLEDDeviceOutputDelegate = new EndOperationDelegate(this.OnEndGetAllLEDDeviceOutput);
            }
            if ((this.onGetAllLEDDeviceOutputCompletedDelegate == null)) {
                this.onGetAllLEDDeviceOutputCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllLEDDeviceOutputCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllLEDDeviceOutputDelegate, null, this.onEndGetAllLEDDeviceOutputDelegate, this.onGetAllLEDDeviceOutputCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginGetAllLEDDeviceInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllLEDDeviceInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> slPanel.ControlService.IControlService.EndGetAllLEDDeviceInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAllLEDDeviceInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAllLEDDeviceInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slPanel.ControlService.IControlService)(this)).BeginGetAllLEDDeviceInfo(callback, asyncState);
        }
        
        private object[] OnEndGetAllLEDDeviceInfo(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> retVal = ((slPanel.ControlService.IControlService)(this)).EndGetAllLEDDeviceInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllLEDDeviceInfoCompleted(object state) {
            if ((this.GetAllLEDDeviceInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllLEDDeviceInfoCompleted(this, new GetAllLEDDeviceInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllLEDDeviceInfoAsync() {
            this.GetAllLEDDeviceInfoAsync(null);
        }
        
        public void GetAllLEDDeviceInfoAsync(object userState) {
            if ((this.onBeginGetAllLEDDeviceInfoDelegate == null)) {
                this.onBeginGetAllLEDDeviceInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAllLEDDeviceInfo);
            }
            if ((this.onEndGetAllLEDDeviceInfoDelegate == null)) {
                this.onEndGetAllLEDDeviceInfoDelegate = new EndOperationDelegate(this.OnEndGetAllLEDDeviceInfo);
            }
            if ((this.onGetAllLEDDeviceInfoCompletedDelegate == null)) {
                this.onGetAllLEDDeviceInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllLEDDeviceInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllLEDDeviceInfoDelegate, null, this.onEndGetAllLEDDeviceInfoDelegate, this.onGetAllLEDDeviceInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slPanel.ControlService.IControlService.BeginImportDevices(string serverIP, int projectID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportDevices(serverIP, projectID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slPanel.ControlService.IControlService.EndImportDevices(System.IAsyncResult result) {
            base.Channel.EndImportDevices(result);
        }
        
        private System.IAsyncResult OnBeginImportDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string serverIP = ((string)(inValues[0]));
            int projectID = ((int)(inValues[1]));
            return ((slPanel.ControlService.IControlService)(this)).BeginImportDevices(serverIP, projectID, callback, asyncState);
        }
        
        private object[] OnEndImportDevices(System.IAsyncResult result) {
            ((slPanel.ControlService.IControlService)(this)).EndImportDevices(result);
            return null;
        }
        
        private void OnImportDevicesCompleted(object state) {
            if ((this.ImportDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportDevicesAsync(string serverIP, int projectID) {
            this.ImportDevicesAsync(serverIP, projectID, null);
        }
        
        public void ImportDevicesAsync(string serverIP, int projectID, object userState) {
            if ((this.onBeginImportDevicesDelegate == null)) {
                this.onBeginImportDevicesDelegate = new BeginOperationDelegate(this.OnBeginImportDevices);
            }
            if ((this.onEndImportDevicesDelegate == null)) {
                this.onEndImportDevicesDelegate = new EndOperationDelegate(this.OnEndImportDevices);
            }
            if ((this.onImportDevicesCompletedDelegate == null)) {
                this.onImportDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginImportDevicesDelegate, new object[] {
                        serverIP,
                        projectID}, this.onEndImportDevicesDelegate, this.onImportDevicesCompletedDelegate, userState);
        }
        
        private void OnToClientSayHelloReceived(object state) {
            if ((this.ToClientSayHelloReceived != null)) {
                object[] results = ((object[])(state));
                this.ToClientSayHelloReceived(this, new ToClientSayHelloReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnToClientNotifyLedDisplayChangeReceived(object state) {
            if ((this.ToClientNotifyLedDisplayChangeReceived != null)) {
                object[] results = ((object[])(state));
                this.ToClientNotifyLedDisplayChangeReceived(this, new ToClientNotifyLedDisplayChangeReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnToClientNotifyConnectionChangeReceived(object state) {
            if ((this.ToClientNotifyConnectionChangeReceived != null)) {
                object[] results = ((object[])(state));
                this.ToClientNotifyConnectionChangeReceived(this, new ToClientNotifyConnectionChangeReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((this.ToClientSayHelloReceived != null) 
                        || (this.ToClientNotifyLedDisplayChangeReceived != null)) 
                        || (this.ToClientNotifyConnectionChangeReceived != null)))) {
                throw new System.InvalidOperationException("指定回呼 InstanceContext 後即無法使用回呼事件。請選擇指定回呼 InstanceContext，或是描述回呼事件。");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override slPanel.ControlService.IControlService CreateChannel() {
            return new ControlServiceClientChannel(this);
        }
        
        private class ControlServiceClientCallback : object, IControlServiceCallback {
            
            private ControlServiceClient proxy;
            
            public void Initialize(ControlServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ToClientSayHello(string hello) {
                this.proxy.OnToClientSayHelloReceived(new object[] {
                            hello});
            }
            
            public void ToClientNotifyLedDisplayChange(int DeviceID, slPanel.ControlService.LedOutputData outdata) {
                this.proxy.OnToClientNotifyLedDisplayChangeReceived(new object[] {
                            DeviceID,
                            outdata});
            }
            
            public void ToClientNotifyConnectionChange(int DeviceID, bool Connected) {
                this.proxy.OnToClientNotifyConnectionChangeReceived(new object[] {
                            DeviceID,
                            Connected});
            }
        }
        
        private class ControlServiceClientChannel : ChannelBase<slPanel.ControlService.IControlService>, slPanel.ControlService.IControlService {
            
            public ControlServiceClientChannel(System.ServiceModel.DuplexClientBase<slPanel.ControlService.IControlService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginImportProject(string serverIP, int projectid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serverIP;
                _args[1] = projectid;
                System.IAsyncResult _result = base.BeginInvoke("ImportProject", _args, callback, asyncState);
                return _result;
            }
            
            public void EndImportProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ImportProject", _args, result);
            }
            
            public System.IAsyncResult BeginToServerSayHello(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ToServerSayHello", _args, callback, asyncState);
                return _result;
            }
            
            public void EndToServerSayHello(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ToServerSayHello", _args, result);
            }
            
            public System.IAsyncResult BeginRegist(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Regist", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegist(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Regist", _args, result);
            }
            
            public System.IAsyncResult BeginReloadSchedule(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReloadSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReloadSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReloadSchedule", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllLEDDeviceOutput(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllLEDDeviceOutput", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> EndGetAllLEDDeviceOutput(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData> _result = ((System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedOutputData>)(base.EndInvoke("GetAllLEDDeviceOutput", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllLEDDeviceInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllLEDDeviceInfo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> EndGetAllLEDDeviceInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<slPanel.ControlService.LedDevice>)(base.EndInvoke("GetAllLEDDeviceInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportDevices(string serverIP, int projectID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serverIP;
                _args[1] = projectID;
                System.IAsyncResult _result = base.BeginInvoke("ImportDevices", _args, callback, asyncState);
                return _result;
            }
            
            public void EndImportDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ImportDevices", _args, result);
            }
        }
    }
    
    public class ToClientSayHelloReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ToClientSayHelloReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string hello {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class ToClientNotifyLedDisplayChangeReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ToClientNotifyLedDisplayChangeReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int DeviceID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public slPanel.ControlService.LedOutputData outdata {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slPanel.ControlService.LedOutputData)(this.results[1]));
            }
        }
    }
    
    public class ToClientNotifyConnectionChangeReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ToClientNotifyConnectionChangeReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int DeviceID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public bool Connected {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}
